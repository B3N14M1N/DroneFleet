/*
 * Source: Generated by AI
 * Model: GPT-5-Codex (Preview)
 * Date: October 14, 2025 at 5:26 PM
 * Description: Refactored the drone display logic into a dedicated class for better separation of concerns and maintainability.
 */

using DroneFleet.Domain.Models;
using DroneFleet.Domain.Models.Interfaces;

namespace DroneFleet.App.ConsoleUI;

internal static class DroneDisplayFormatter
{
    private readonly record struct Cell(string Text, ConsoleColor? Color);

    private sealed class ColumnDefinition(string header, Func<Drone, Cell> resolver)
    {
        public string Header { get; } = header;
        public Func<Drone, Cell> Resolver { get; } = resolver;
    }

    public static void PrintCategory(string categoryName, IReadOnlyCollection<Drone> drones)
    {
        if (drones.Count == 0)
        {
            return;
        }

        var previousColor = Console.ForegroundColor;
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine($"=== {categoryName} ===");
        Console.ForegroundColor = previousColor;

        var columns = BuildColumnsForCategory(drones.First());
        var rows = drones.Select(d => columns.Select(col => col.Resolver(d)).ToList()).ToList();
        var widths = CalculateColumnWidths(columns, rows);

        PrintSeparator(widths);
        PrintHeader(columns, widths);
        PrintSeparator(widths);
        foreach (var row in rows)
        {
            PrintRow(row, widths);
        }
        PrintSeparator(widths);
        Console.WriteLine();
    }

    private static IReadOnlyList<ColumnDefinition> BuildColumnsForCategory(Drone sample)
    {
        var columns = new List<ColumnDefinition>
        {
            new("ID", d => new Cell(d.Id.ToString(), null)),
            new("Name", d => new Cell(d.Name, null)),
            new("Battery", BuildBatteryCell),
            new("Status", BuildStatusCell)
        };

        switch (sample)
        {
            case DeliveryDrone:
                columns.Add(new("Waypoint", d => new Cell(FormatWaypoint(((DeliveryDrone)d).CurrentWaypoint), null)));
                columns.Add(new("Load", d =>
                {
                    var drone = (DeliveryDrone)d;
                    return new Cell($"{drone.CurrentLoadKg:0.#}/{drone.CapacityKg:0.#}kg", null);
                }));
                break;
            case SurveyDrone:
                columns.Add(new("Waypoint", d => new Cell(FormatWaypoint(((SurveyDrone)d).CurrentWaypoint), null)));
                columns.Add(new("Photos", d => new Cell(((SurveyDrone)d).PhotoCount.ToString(), null)));
                break;
            default:
                if (sample is INavigable)
                {
                    columns.Add(new("Waypoint", d =>
                    {
                        var navigable = (INavigable)d;
                        return navigable switch
                        {
                            DeliveryDrone delivery => new Cell(FormatWaypoint(delivery.CurrentWaypoint), null),
                            SurveyDrone survey => new Cell(FormatWaypoint(survey.CurrentWaypoint), null),
                            _ => new Cell("-", null)
                        };
                    }));
                }
                break;
        }

        columns.Add(new("Type", d => new Cell(d.GetType().Name.Replace("Drone", string.Empty), ConsoleColor.DarkGray)));

        return columns;
    }

    private static Cell BuildBatteryCell(Drone drone)
    {
        var text = $"{drone.BatteryPercent:0.#}%";
        var color = drone.BatteryPercent switch
        {
            < 20 => ConsoleColor.Red,
            < 50 => ConsoleColor.Yellow,
            _ => ConsoleColor.Green
        };
        return new Cell(text, color);
    }

    private static Cell BuildStatusCell(Drone drone)
    {
        return drone.IsAirborne
            ? new Cell("Airborne", ConsoleColor.Green)
            : new Cell("Landed", ConsoleColor.Gray);
    }

    private static int[] CalculateColumnWidths(IReadOnlyList<ColumnDefinition> columns, IReadOnlyList<List<Cell>> rows)
    {
        var widths = new int[columns.Count];
        for (int columnIndex = 0; columnIndex < columns.Count; columnIndex++)
        {
            var headerLength = columns[columnIndex].Header.Length;
            var maxCellLength = rows.Select(row => row[columnIndex].Text.Length).DefaultIfEmpty(0).Max();
            widths[columnIndex] = Math.Max(headerLength, maxCellLength);
        }

        return widths;
    }

    private static void PrintHeader(IReadOnlyList<ColumnDefinition> columns, IReadOnlyList<int> widths)
    {
        var previousColor = Console.ForegroundColor;
        Console.Write("|");
        for (int index = 0; index < columns.Count; index++)
        {
            Console.Write(" ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write(columns[index].Header.PadRight(widths[index]));
            Console.ForegroundColor = previousColor;
            Console.Write(" |");
        }
        Console.WriteLine();
    }

    private static void PrintRow(IReadOnlyList<Cell> row, IReadOnlyList<int> widths)
    {
        Console.Write("|");
        for (int index = 0; index < row.Count; index++)
        {
            var cell = row[index];
            Console.Write(" ");
            var previousColor = Console.ForegroundColor;
            if (cell.Color.HasValue)
            {
                Console.ForegroundColor = cell.Color.Value;
            }
            Console.Write(cell.Text.PadRight(widths[index]));
            Console.ForegroundColor = previousColor;
            Console.Write(" |");
        }

        Console.WriteLine();
    }

    private static void PrintSeparator(IReadOnlyList<int> widths)
    {
        Console.Write("+");
        foreach (var width in widths)
        {
            Console.Write(new string('-', width + 2));
            Console.Write("+");
        }

        Console.WriteLine();
    }

    private static string FormatWaypoint((double lat, double lon)? waypoint)
    {
        if (waypoint == null)
        {
            return "-";
        }

        var (lat, lon) = waypoint.Value;
        return $"({lat:0.###}, {lon:0.###})";
    }
}
